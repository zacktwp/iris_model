#!/usr/bin/env python


# Multiclass Classification with the Iris Flowers Dataset
import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import Dense
from keras.wrappers.scikit_learn import KerasClassifier
from keras.utils import np_utils
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.preprocessing import LabelEncoder
#import boto3
#import s3fs
import os
# fix random seed for reproducibility
seed = 7
np.random.seed(seed)


prefix = '/opt/ml/'
input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')


#load data from s3
#bucket_name = 'iris-docker-data'
#s3 = boto3.client('s3')
#obj = s3.get_object(Bucket=bucket_name, Key='iris.csv')
#dataframe = pd.read_csv('iris.csv')

# This algorithm has a single channel of input data called 'training'. Since we run in
# File mode, the input files are copied to the directory specified here.
channel_name='training'
training_path = os.path.join(input_path, channel_name)

input_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
dataset = [ pd.read_csv(file) for file in input_files ]
dataset = pd.concat(dataset)

dataset = dataset.values
X = dataset[:,0:4].astype(float)
Y = dataset[:,4]

# encode class values as integers
encoder = LabelEncoder()
encoder.fit(Y)
encoded_Y = encoder.transform(Y)
# convert integers to dummy variables (i.e. one hot encoded)
dummy_y = np_utils.to_categorical(encoded_Y)

# define baseline model
def train():
    # create model
    model = Sequential()
    model.add(Dense(8, input_dim=4, activation='relu'))
    model.add(Dense(3, activation='softmax'))
    # Compile model
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    model.fit(X, dummy_y, epochs=200, batch_size=5, verbose=0, shuffle=True)
    model.save('/opt/ml/model/iris_model.h5')
    return model


train()

if __name__ == '__main__':
    train()




